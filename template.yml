AWSTemplateFormatVersion: '2010-09-09'
Description: SFTP

Parameters:
  Env:
    Type: String
    Default: dev

Resources:
  TransferSftp:
    Type: AWS::Transfer::Server
    DependsOn:
      - AccessSftpTransfer
      - SftpEIPA
      - SftpEIPB
    Properties:
      EndpointDetails:
        SubnetIds:
          - !Ref PublicSubnetA
          - !Ref PublicSubnetB
        VpcId: !Ref VPC
        AddressAllocationIds:
          - !GetAtt [SftpEIPA, AllocationId]
          - !GetAtt [SftpEIPB, AllocationId]
      EndpointType: VPC      
      IdentityProviderType: SERVICE_MANAGED
      LoggingRole: 
        !GetAtt
          - AccessSftpTransfer
          - Arn

  SftpEIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  SftpEIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  SecurityGropuIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt [VPC, DefaultSecurityGroup]
      Description : Allow SSH
      CidrIp: 0.0.0.0/0
      FromPort : 22
      ToPort : 22
      IpProtocol : tcp
      
  SecurityGropuEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt [VPC, DefaultSecurityGroup]
      Description : Allow SSH
      CidrIp: 0.0.0.0/0
      FromPort : 22
      ToPort : 22
      IpProtocol : tcp

  AccessSftpTransfer:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AccessSftpTransfer
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - transfer.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /      
      Policies:
        - PolicyName: sftpTransfer
          PolicyDocument:
            Statement:
              - Sid: AllowListingOfUserFolder
                Action:
                  - 's3:*'
                Effect: Allow
                Resource:
                  - 'arn:aws:s3:::*'
              - Sid: HomeDirObjectAccess
                Effect: Allow
                Action:
                  - 's3:*'
                Resource: 'arn:aws:s3:::*/*'

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  IGW:
    Type: AWS::EC2::InternetGateway
  
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'IGW'

# Subnets >>
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", 'a']]
      MapPublicIpOnLaunch: 'True'
      VpcId: !Ref 'VPC'

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Join ["", [!Ref "AWS::Region", 'b']]
      MapPublicIpOnLaunch: 'True'
      VpcId: !Ref 'VPC'

# Routetables >>
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'

  RoutePublic:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  SubnetRoutePublicA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref 'RouteTablePublic'
        SubnetId: !Ref 'PublicSubnetA'

  SubnetRoutePublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'RouteTablePublic'
      SubnetId: !Ref 'PublicSubnetB'

  # Networld ACL >>
  PublicSubnetAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VPC'

  PublicInSubnetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0

  PublicOutSubnetAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetAcl
      RuleNumber: '200'
      Protocol: '-1'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0

  PublicSubnetAclAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicSubnetAcl

  PublicSubnetAclAssociationB:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      NetworkAclId: !Ref PublicSubnetAcl
  # Network ACL <<
